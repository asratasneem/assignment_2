# -*- coding: utf-8 -*-
"""assignment_2 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ppSifmrHAy27KpYxzLjzsO6suhK9WNSh
"""

#Import necessary libraries
import pandas as pd
import numpy as np
from scipy.optimize import curve_fit

# Define a function for exponential decay
def exp_decay(t, a, b):
    return a * np.exp(-b * t)

#Load the dataset
excel_data = pd.read_csv('/content/DecayTimecourse.csv')
#Select columns related to time course data
timecourse_columns = [col for col in excel_data.columns if 'timecourse' in col.lower() or col.startswith('_')]
# Remove rows with all NaN values from selected columns
cleaned_data = excel_data.dropna(subset=timecourse_columns, how='all')

#Reshape the data into a long format
melted_data = pd.melt(cleaned_data, id_vars=['Time course #'], value_vars=timecourse_columns,
                      var_name='Time', value_name='Expression').dropna(subset=['Expression'])

# Extract numerical values from 'Time' column
melted_data['Time'] = melted_data['Time'].str.extract('(\d+)').astype(float)

# Calculate half-life for each gene
results = []
for gene, group in melted_data.groupby('Time course #'):
    if gene == 'YORF':
        continue
    time = group['Time'].values
    expression = group['Expression'].values
    try:
        # Optimize the curve fitting
        popt, _ = curve_fit(exp_decay, time, expression, p0=[1, 0.1], bounds=(0, [np.inf, 1]))
        half_life = np.log(2) / popt[1]
        results.append((gene, half_life))
    except RuntimeError:
        # Handle cases where curve fitting fails
        results.append((gene, np.nan))

# Convert results to DataFram
half_life_df = pd.DataFrame(results, columns=['Gene', 'Half_life'])

# Print gene names and corresponding half-lives
for index, row in half_life_df.iterrows():
    #Check if the half-life is a number (not NaN) before printing
        print(f"Gene: {row['Gene']}, Half-life: {row['Half_life']:.2f} minutes")

# Calculate the 90th and 10th percentiles of half-life values
top_10_percentile = np.percentile(half_life_df['Half_life'].dropna(), 90)
bottom_10_percentile = np.percentile(half_life_df['Half_life'].dropna(), 10)


# Filter genes with half-lives in the top 10 percentile
top_genes = half_life_df[half_life_df['Half_life'] >= top_10_percentile]
# Filter genes with half-lives in the bottom 10 percentile
bottom_genes = half_life_df[half_life_df['Half_life'] <= bottom_10_percentile]

# Print genes in the top 10 percentile of half-lives
print("\nGenes in the top 10 percentile of half-lives:")
print(top_genes)

# Print genes in the bottom 10 percentile of half-lives
print("\nGenes in the bottom 10 percentile of half-lives:")
print(bottom_genes)

# Calculate the value corresponding to the 90th percentile of half-life values
top_10_percentile_value = np.percentile(half_life_df['Half_life'].dropna(), 90)

# Filter the DataFrame to get the rows where the half-life is in the top 10 percentile
top_10_percentile_genes = half_life_df[half_life_df['Half_life'] >= top_10_percentile_value]

# Print the genes and their half-lives in the top 10 percentile
print("Genes in the top 10 percentile of half-lives:")
for index, row in top_10_percentile_genes.iterrows():
    print(f"Gene: {row['Gene']}, Half-life: {row['Half_life']}")

#Calculate the value corresponding to the 10th percentile of half-life values
bottom_10_percentile_value = np.percentile(half_life_df['Half_life'].dropna(), 10)

# Filter the DataFrame to get the rows where the half-life is in the bottom 10 percentile
bottom_10_percentile_genes = half_life_df[half_life_df['Half_life'] <= bottom_10_percentile_value]

# Print the genes and their half-lives in the bottom 10 percentile
print("Genes in the bottom 10 percentile of half-lives:")
for index, row in bottom_10_percentile_genes.iterrows():
    print(f"Gene: {row['Gene']}, Half-life: {row['Half_life']}")

# Save the DataFrame of genes in the top 10 percentile of half-lives to a CSV file
top_10_percentile_genes.to_csv("/content/top_lives.csv", index=False)

# Save the DataFrame of genes in the bottom 10 percentile of half-lives to a CSV file
bottom_10_percentile_genes.to_csv("/content/bottom_lives.csv", index=False)

